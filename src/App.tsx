import { Send } from "./Send";
import { Request } from "./Request";
import {
  Box,
  Button,
  Container,
  Heading,
  Link,
  ListItem,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalHeader,
  ModalOverlay,
  OrderedList,
  Text,
  VStack,
  useDisclosure,
} from "@chakra-ui/react";

const search = new URLSearchParams(location.search);

export function App() {
  const rawKey = search.get("key");
  const {
    isOpen: isExplainerOpen,
    onOpen: openExplainer,
    onClose: closeExplainer,
  } = useDisclosure();

  return (
    <Container p="6">
      <VStack spacing="4" alignItems="stretch">
        <Heading>Share secrets safely</Heading>
        {rawKey ? <Send rawKey={rawKey} /> : <Request />}
        <Text fontSize="sm">
          No data is stored or sent outside of this page. You are in full
          control of your data.{" "}
          <Button variant="link" onClick={openExplainer}>
            Learn more
          </Button>
        </Text>
        <Box as="footer" fontSize="sm" textAlign="center" mt="3">
          Built by{" "}
          <Link isExternal href="https://camlittle.com">
            Cameron Little
          </Link>
        </Box>
      </VStack>

      <Modal isOpen={isExplainerOpen} onClose={closeExplainer}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>How this works</ModalHeader>
          <ModalCloseButton />
          <ModalBody pb="5">
            <VStack spacing="2">
              <OrderedList spacing="2">
                <ListItem>
                  An asymmetric keypair (a{" "}
                  <Text as="span" color="green.600">
                    public
                  </Text>{" "}
                  and{" "}
                  <Text as="span" color="yellow.600">
                    private
                  </Text>{" "}
                  key) is generated by the requestor
                  <Text as="span" aria-hidden="true">
                    {" "}
                    👩🏾‍🌾
                  </Text>
                  . The{" "}
                  <Text as="span" color="green.600">
                    public key
                  </Text>{" "}
                  is encoded into the link used by the sender
                  <Text as="span" aria-hidden="true">
                    {" "}
                    👨🏻‍🎨
                  </Text>
                  .
                </ListItem>
                <ListItem>
                  A{" "}
                  <Text as="span" color="cyan.600">
                    symmetric encryption key
                  </Text>{" "}
                  is generated by the sender
                  <Text as="span" aria-hidden="true">
                    {" "}
                    👨🏻‍🎨
                  </Text>
                  .
                </ListItem>
                <ListItem>
                  The sender
                  <Text as="span" aria-hidden="true">
                    {" "}
                    👨🏻‍🎨
                  </Text>{" "}
                  uses the{" "}
                  <Text as="span" color="cyan.600">
                    symmetric key
                  </Text>{" "}
                  to encrypt their{" "}
                  <Text as="span" color="red.600">
                    secret
                  </Text>{" "}
                  and wraps the{" "}
                  <Text as="span" color="cyan.600">
                    symmetric key
                  </Text>{" "}
                  with the{" "}
                  <Text as="span" color="green.600">
                    public key
                  </Text>
                  .
                </ListItem>
                <ListItem>
                  The requestor
                  <Text as="span" aria-hidden="true">
                    {" "}
                    👩🏾‍🌾
                  </Text>{" "}
                  unwraps the{" "}
                  <Text as="span" color="cyan.600">
                    symmetric key
                  </Text>{" "}
                  with their{" "}
                  <Text as="span" color="yellow.600">
                    private key
                  </Text>{" "}
                  and decrypts the{" "}
                  <Text as="span" color="red.600">
                    secret
                  </Text>{" "}
                  with the{" "}
                  <Text as="span" color="cyan.600">
                    symmetric key
                  </Text>
                  .
                </ListItem>
              </OrderedList>
              <Text>
                The intermediate symmetric encryption key is needed because the
                asymmetric key can only encrypt short messages.
              </Text>
              <Text>
                This is implemented with the{" "}
                <Link isExternal href="https://w3c.github.io/webcrypto/">
                  Web Cryptography API
                </Link>
                . No data (including secrets, encrypted content, and keys) is
                persisted or sent externally, except by you copying it.
              </Text>
            </VStack>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Container>
  );
}
